/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.eneco.trading.kafka.connect.twitter;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"com.eneco.trading.kafka.connect.twitter\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"created_at\",\"type\":[\"null\",\"string\"]},{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"name\":\"screen_name\",\"type\":[\"null\",\"string\"]},{\"name\":\"location\",\"type\":[\"null\",\"string\"]},{\"name\":\"verified\",\"type\":\"boolean\"},{\"name\":\"friends_count\",\"type\":\"int\"},{\"name\":\"followers_count\",\"type\":\"int\"},{\"name\":\"statuses_count\",\"type\":\"int\"}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.User\"}},{\"name\":\"text\",\"type\":[\"null\",\"string\"]},{\"name\":\"lang\",\"type\":[\"null\",\"string\"]},{\"name\":\"is_retweet\",\"type\":\"boolean\"},{\"name\":\"entities\",\"type\":{\"type\":\"record\",\"name\":\"Entities\",\"fields\":[{\"name\":\"hashtags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Hashtag\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",\"string\"]}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.Hashtag\"}}]},{\"name\":\"media\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Medium\",\"fields\":[{\"name\":\"display_url\",\"type\":[\"null\",\"string\"]},{\"name\":\"expanded_url\",\"type\":[\"null\",\"string\"]},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"url\",\"type\":[\"null\",\"string\"]}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.Medium\"}}]},{\"name\":\"urls\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Url\",\"fields\":[{\"name\":\"display_url\",\"type\":[\"null\",\"string\"]},{\"name\":\"expanded_url\",\"type\":[\"null\",\"string\"]},{\"name\":\"url\",\"type\":[\"null\",\"string\"]}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.Url\"}}]},{\"name\":\"user_mentions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UserMention\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"]},{\"name\":\"screen_name\",\"type\":[\"null\",\"string\"]}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.UserMention\"}}]}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.Entities\"}}],\"connect.name\":\"com.eneco.trading.kafka.connect.twitter.Tweet\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence created_at;
  @Deprecated public com.eneco.trading.kafka.connect.twitter.User user;
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.CharSequence lang;
  @Deprecated public boolean is_retweet;
  @Deprecated public com.eneco.trading.kafka.connect.twitter.Entities entities;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Tweet() {}

  /**
   * All-args constructor.
   */
  public Tweet(java.lang.Long id, java.lang.CharSequence created_at, com.eneco.trading.kafka.connect.twitter.User user, java.lang.CharSequence text, java.lang.CharSequence lang, java.lang.Boolean is_retweet, com.eneco.trading.kafka.connect.twitter.Entities entities) {
    this.id = id;
    this.created_at = created_at;
    this.user = user;
    this.text = text;
    this.lang = lang;
    this.is_retweet = is_retweet;
    this.entities = entities;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return created_at;
    case 2: return user;
    case 3: return text;
    case 4: return lang;
    case 5: return is_retweet;
    case 6: return entities;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: created_at = (java.lang.CharSequence)value$; break;
    case 2: user = (com.eneco.trading.kafka.connect.twitter.User)value$; break;
    case 3: text = (java.lang.CharSequence)value$; break;
    case 4: lang = (java.lang.CharSequence)value$; break;
    case 5: is_retweet = (java.lang.Boolean)value$; break;
    case 6: entities = (com.eneco.trading.kafka.connect.twitter.Entities)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return created_at;
  }

  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'user' field.
   */
  public com.eneco.trading.kafka.connect.twitter.User getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(com.eneco.trading.kafka.connect.twitter.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'lang' field.
   */
  public java.lang.CharSequence getLang() {
    return lang;
  }

  /**
   * Sets the value of the 'lang' field.
   * @param value the value to set.
   */
  public void setLang(java.lang.CharSequence value) {
    this.lang = value;
  }

  /**
   * Gets the value of the 'is_retweet' field.
   */
  public java.lang.Boolean getIsRetweet() {
    return is_retweet;
  }

  /**
   * Sets the value of the 'is_retweet' field.
   * @param value the value to set.
   */
  public void setIsRetweet(java.lang.Boolean value) {
    this.is_retweet = value;
  }

  /**
   * Gets the value of the 'entities' field.
   */
  public com.eneco.trading.kafka.connect.twitter.Entities getEntities() {
    return entities;
  }

  /**
   * Sets the value of the 'entities' field.
   * @param value the value to set.
   */
  public void setEntities(com.eneco.trading.kafka.connect.twitter.Entities value) {
    this.entities = value;
  }

  /** Creates a new Tweet RecordBuilder */
  public static com.eneco.trading.kafka.connect.twitter.Tweet.Builder newBuilder() {
    return new com.eneco.trading.kafka.connect.twitter.Tweet.Builder();
  }
  
  /** Creates a new Tweet RecordBuilder by copying an existing Builder */
  public static com.eneco.trading.kafka.connect.twitter.Tweet.Builder newBuilder(com.eneco.trading.kafka.connect.twitter.Tweet.Builder other) {
    return new com.eneco.trading.kafka.connect.twitter.Tweet.Builder(other);
  }
  
  /** Creates a new Tweet RecordBuilder by copying an existing Tweet instance */
  public static com.eneco.trading.kafka.connect.twitter.Tweet.Builder newBuilder(com.eneco.trading.kafka.connect.twitter.Tweet other) {
    return new com.eneco.trading.kafka.connect.twitter.Tweet.Builder(other);
  }
  
  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private long id;
    private java.lang.CharSequence created_at;
    private com.eneco.trading.kafka.connect.twitter.User user;
    private java.lang.CharSequence text;
    private java.lang.CharSequence lang;
    private boolean is_retweet;
    private com.eneco.trading.kafka.connect.twitter.Entities entities;

    /** Creates a new Builder */
    private Builder() {
      super(com.eneco.trading.kafka.connect.twitter.Tweet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.eneco.trading.kafka.connect.twitter.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lang)) {
        this.lang = data().deepCopy(fields()[4].schema(), other.lang);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.is_retweet)) {
        this.is_retweet = data().deepCopy(fields()[5].schema(), other.is_retweet);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.entities)) {
        this.entities = data().deepCopy(fields()[6].schema(), other.entities);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Tweet instance */
    private Builder(com.eneco.trading.kafka.connect.twitter.Tweet other) {
            super(com.eneco.trading.kafka.connect.twitter.Tweet.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user)) {
        this.user = data().deepCopy(fields()[2].schema(), other.user);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.text)) {
        this.text = data().deepCopy(fields()[3].schema(), other.text);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lang)) {
        this.lang = data().deepCopy(fields()[4].schema(), other.lang);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.is_retweet)) {
        this.is_retweet = data().deepCopy(fields()[5].schema(), other.is_retweet);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.entities)) {
        this.entities = data().deepCopy(fields()[6].schema(), other.entities);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'created_at' field */
    public java.lang.CharSequence getCreatedAt() {
      return created_at;
    }
    
    /** Sets the value of the 'created_at' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.created_at = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'created_at' field has been set */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'created_at' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'user' field */
    public com.eneco.trading.kafka.connect.twitter.User getUser() {
      return user;
    }
    
    /** Sets the value of the 'user' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setUser(com.eneco.trading.kafka.connect.twitter.User value) {
      validate(fields()[2], value);
      this.user = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'user' field has been set */
    public boolean hasUser() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'user' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearUser() {
      user = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'text' field */
    public java.lang.CharSequence getText() {
      return text;
    }
    
    /** Sets the value of the 'text' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setText(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.text = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'text' field has been set */
    public boolean hasText() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'text' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearText() {
      text = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'lang' field */
    public java.lang.CharSequence getLang() {
      return lang;
    }
    
    /** Sets the value of the 'lang' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setLang(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lang = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'lang' field has been set */
    public boolean hasLang() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'lang' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearLang() {
      lang = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'is_retweet' field */
    public java.lang.Boolean getIsRetweet() {
      return is_retweet;
    }
    
    /** Sets the value of the 'is_retweet' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setIsRetweet(boolean value) {
      validate(fields()[5], value);
      this.is_retweet = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'is_retweet' field has been set */
    public boolean hasIsRetweet() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'is_retweet' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearIsRetweet() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'entities' field */
    public com.eneco.trading.kafka.connect.twitter.Entities getEntities() {
      return entities;
    }
    
    /** Sets the value of the 'entities' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder setEntities(com.eneco.trading.kafka.connect.twitter.Entities value) {
      validate(fields()[6], value);
      this.entities = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'entities' field has been set */
    public boolean hasEntities() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'entities' field */
    public com.eneco.trading.kafka.connect.twitter.Tweet.Builder clearEntities() {
      entities = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.created_at = fieldSetFlags()[1] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.user = fieldSetFlags()[2] ? this.user : (com.eneco.trading.kafka.connect.twitter.User) defaultValue(fields()[2]);
        record.text = fieldSetFlags()[3] ? this.text : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.lang = fieldSetFlags()[4] ? this.lang : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.is_retweet = fieldSetFlags()[5] ? this.is_retweet : (java.lang.Boolean) defaultValue(fields()[5]);
        record.entities = fieldSetFlags()[6] ? this.entities : (com.eneco.trading.kafka.connect.twitter.Entities) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
